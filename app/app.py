# Importing libs nativas
import os

# Importing third-party libraries
import streamlit as st
from crewai import Agent, Crew, Task
from crewai.process import Process
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()


# Page configuration
st.set_page_config(page_title="Terraform AI", page_icon=":100:", layout="wide")

st.title("ü§ñ Gerador IA de c√≥digo para Terraform")
st.markdown(
    """Esta aplica√ß√£o utiliza um agente de IA especializado para converter suas
    descri√ß√µes em c√≥digo Terraform (HCL) pronto para uso."""
)


# Configuring CrewAI Agent
try:
    openai_llm = ChatOpenAI(model="gpt-4-turbo", api_key=os.getenv("OPENAI_API_KEY"))
except Exception as e:
    st.error(f"Erro ao inicializar o modelo de linguagem: {e}" "Verifique suas credenciais e tente novamente!")
    openai_llm = None


# Defining AI Agent
terraform_expert = Agent(
    role="Especialista S√™nior em Infraestrutura como C√≥digo usando Terraform",
    goal="Criar scripts Terraform precisos, eficientes e seguros com base nos requisitos do usu√°rio.",
    backstory=(
        """Voc√™ √© um engenheiro de DataOps altamente experiente com uma d√©cada de experi√™ncia na automa√ß√£o
        de provisionamento de infraestrutura na nuvem usando Terraform. Voc√™ tem um profundo conhecimento
        dos provedores de nuvem como AWS, GCP e Azure, e √© mestre em escrever c√≥digo HCL (Hashicorp
        Configuration Language) limpo, modular e reutiliz√°vel. Sua miss√£o √© traduzir descri√ß√µes de alto
        n√≠vel da infraestrutura desejada em c√≥digo Terraform pronto para produ√ß√£o."""
    ),
    verbose=True,
    allow_delegation=False,
    llm=openai_llm,
)


# Configuring User Interface
st.header("Descreva a Infraestrutura Desejada")

prompt = st.text_area(
    label="Forne√ßa um prompt claro e detalhado. Quanto mais espec√≠fico voc√™ for, melhor ser√° o resultado.",
    height=150,
    placeholder="""Exemplo: Crie o c√≥digo IaC com Terraform para criar um bucket S3 na AWS com o nome 'dsa-bucket-super-seguro-12345,
    com versionamento e criptografia SSE-S3 habilitados.""",
)

if st.button(label="Gerar Script Terraform", type="primary", disabled=(not openai_llm)):
    if prompt:
        with st.spinner("O agente de IA est√° trabalhando... Aguarde um momento!"):
            try:
                # Defining the task for agent with base user prompt
                terraform_task = Task(
                    description=(
                        """Com base na seguint solicita√ß√£o do usu√°rio, gere um script Terraform completo e funcional.
                        A sa√≠da deve conter o bloco de c√≥digo HCL e instru√ß√µes detalhadas para a escrita do c√≥digo.
                        O c√≥digo deve ser bem formatado e pronto para ser salvo em um arquivo .tf.\n\n"""
                        f"Solicita√ß√£o do Usu√°rio: '{prompt}'"
                    ),
                    expected_output="""Um bloco de c√≥digo contendo o script Terraform (HCL) e todas as instru√ß√µes detalhadas do
                    desenvolvimento do c√≥digo.""",
                    agent=terraform_expert,
                )

                # Creates and Executes the equip (Crew)
                terraform_crew = Crew(agents=[terraform_expert], tasks=[terraform_task], process=Process.sequential, verbose=True)

                # Start the process and get the result
                result = terraform_crew.kickoff()

                # Display the result
                st.header("Resultado Gerado")
                st.code(result, language="terraform")
                st.success("Script gerado com sucesso!")

            except Exception as e:
                st.error(f"Ocorreu um erro durante a execu√ß√£o: {e}")
    else:
        st.warning("Por favor, insira uma descri√ß√£o da infraestrutura para gerar o script.")

st.markdown("---")
st.markdown(
    """Constru√≠do com [Streamlit](https://streamlit.io/) e [CrewAI](https://www.crewai.com/)
    por [Jadeson Bruno Albuquerque da Silva](https://github.com/JadesonBruno)"""
)
